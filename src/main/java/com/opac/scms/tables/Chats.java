/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Indexes;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.ChatsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Chats extends TableImpl<ChatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.chats</code>
     */
    public static final Chats CHATS = new Chats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChatsRecord> getRecordType() {
        return ChatsRecord.class;
    }

    /**
     * The column <code>applet.chats.id</code>.
     */
    public final TableField<ChatsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.chats.advert_id</code>.
     */
    public final TableField<ChatsRecord, Integer> ADVERT_ID = createField(DSL.name("advert_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>applet.chats.user_id</code>. usuario q inicia el chat
     */
    public final TableField<ChatsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "usuario q inicia el chat");

    /**
     * The column <code>applet.chats.created</code>.
     */
    public final TableField<ChatsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.chats.modified</code>.
     */
    public final TableField<ChatsRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private Chats(Name alias, Table<ChatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Chats(Name alias, Table<ChatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.chats</code> table reference
     */
    public Chats(String alias) {
        this(DSL.name(alias), CHATS);
    }

    /**
     * Create an aliased <code>applet.chats</code> table reference
     */
    public Chats(Name alias) {
        this(alias, CHATS);
    }

    /**
     * Create a <code>applet.chats</code> table reference
     */
    public Chats() {
        this(DSL.name("chats"), null);
    }

    public <O extends Record> Chats(Table<O> child, ForeignKey<O, ChatsRecord> key) {
        super(child, key, CHATS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHATS_USER_ID);
    }

    @Override
    public Identity<ChatsRecord, Integer> getIdentity() {
        return (Identity<ChatsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChatsRecord> getPrimaryKey() {
        return Keys.KEY_CHATS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ChatsRecord>> getKeys() {
        return Arrays.<UniqueKey<ChatsRecord>>asList(Keys.KEY_CHATS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ChatsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChatsRecord, ?>>asList(Keys.CHATS_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.CHATS_IBFK_1);
    }

    @Override
    public Chats as(String alias) {
        return new Chats(DSL.name(alias), this);
    }

    @Override
    public Chats as(Name alias) {
        return new Chats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(String name) {
        return new Chats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Chats rename(Name name) {
        return new Chats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
