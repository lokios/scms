/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.SettingsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Settings extends TableImpl<SettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.settings</code>
     */
    public static final Settings SETTINGS = new Settings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SettingsRecord> getRecordType() {
        return SettingsRecord.class;
    }

    /**
     * The column <code>applet.settings.id</code>.
     */
    public final TableField<SettingsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.settings.radius</code>.
     */
    public final TableField<SettingsRecord, BigDecimal> RADIUS = createField(DSL.name("radius"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>applet.settings.adverts_per_page</code>.
     */
    public final TableField<SettingsRecord, Short> ADVERTS_PER_PAGE = createField(DSL.name("adverts_per_page"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>applet.settings.contact_email</code>.
     */
    public final TableField<SettingsRecord, String> CONTACT_EMAIL = createField(DSL.name("contact_email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.settings.payment_percent</code>.
     */
    public final TableField<SettingsRecord, BigDecimal> PAYMENT_PERCENT = createField(DSL.name("payment_percent"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>applet.settings.mangopay_key</code>.
     */
    public final TableField<SettingsRecord, String> MANGOPAY_KEY = createField(DSL.name("mangopay_key"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>applet.settings.mangopay_secret</code>.
     */
    public final TableField<SettingsRecord, String> MANGOPAY_SECRET = createField(DSL.name("mangopay_secret"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>applet.settings.created</code>.
     */
    public final TableField<SettingsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.settings.modified</code>.
     */
    public final TableField<SettingsRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private Settings(Name alias, Table<SettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Settings(Name alias, Table<SettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.settings</code> table reference
     */
    public Settings(String alias) {
        this(DSL.name(alias), SETTINGS);
    }

    /**
     * Create an aliased <code>applet.settings</code> table reference
     */
    public Settings(Name alias) {
        this(alias, SETTINGS);
    }

    /**
     * Create a <code>applet.settings</code> table reference
     */
    public Settings() {
        this(DSL.name("settings"), null);
    }

    public <O extends Record> Settings(Table<O> child, ForeignKey<O, SettingsRecord> key) {
        super(child, key, SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public Identity<SettingsRecord, Integer> getIdentity() {
        return (Identity<SettingsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SettingsRecord> getPrimaryKey() {
        return Keys.KEY_SETTINGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SettingsRecord>> getKeys() {
        return Arrays.<UniqueKey<SettingsRecord>>asList(Keys.KEY_SETTINGS_PRIMARY);
    }

    @Override
    public Settings as(String alias) {
        return new Settings(DSL.name(alias), this);
    }

    @Override
    public Settings as(Name alias) {
        return new Settings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(String name) {
        return new Settings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Settings rename(Name name) {
        return new Settings(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, BigDecimal, Short, String, BigDecimal, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
