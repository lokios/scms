/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Indexes;
import com.opac.scms.tables.records.PasswordResetsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PasswordResets extends TableImpl<PasswordResetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.password_resets</code>
     */
    public static final PasswordResets PASSWORD_RESETS = new PasswordResets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PasswordResetsRecord> getRecordType() {
        return PasswordResetsRecord.class;
    }

    /**
     * The column <code>applet.password_resets.email</code>.
     */
    public final TableField<PasswordResetsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.password_resets.token</code>.
     */
    public final TableField<PasswordResetsRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.password_resets.created_at</code>.
     */
    public final TableField<PasswordResetsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0), this, "");

    private PasswordResets(Name alias, Table<PasswordResetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PasswordResets(Name alias, Table<PasswordResetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.password_resets</code> table reference
     */
    public PasswordResets(String alias) {
        this(DSL.name(alias), PASSWORD_RESETS);
    }

    /**
     * Create an aliased <code>applet.password_resets</code> table reference
     */
    public PasswordResets(Name alias) {
        this(alias, PASSWORD_RESETS);
    }

    /**
     * Create a <code>applet.password_resets</code> table reference
     */
    public PasswordResets() {
        this(DSL.name("password_resets"), null);
    }

    public <O extends Record> PasswordResets(Table<O> child, ForeignKey<O, PasswordResetsRecord> key) {
        super(child, key, PASSWORD_RESETS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PASSWORD_RESETS_PASSWORD_RESETS_EMAIL_INDEX);
    }

    @Override
    public PasswordResets as(String alias) {
        return new PasswordResets(DSL.name(alias), this);
    }

    @Override
    public PasswordResets as(Name alias) {
        return new PasswordResets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PasswordResets rename(String name) {
        return new PasswordResets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PasswordResets rename(Name name) {
        return new PasswordResets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
