/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Indexes;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.PaymentsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payments extends TableImpl<PaymentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.payments</code>
     */
    public static final Payments PAYMENTS = new Payments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentsRecord> getRecordType() {
        return PaymentsRecord.class;
    }

    /**
     * The column <code>applet.payments.id</code>.
     */
    public final TableField<PaymentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.payments.stripe_charge_id</code>.
     */
    public final TableField<PaymentsRecord, String> STRIPE_CHARGE_ID = createField(DSL.name("stripe_charge_id"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>applet.payments.mangopay_pay_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> MANGOPAY_PAY_ID = createField(DSL.name("mangopay_pay_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>applet.payments.mangopay_payout_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> MANGOPAY_PAYOUT_ID = createField(DSL.name("mangopay_payout_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>applet.payments.advert_id</code>.
     */
    public final TableField<PaymentsRecord, Integer> ADVERT_ID = createField(DSL.name("advert_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>applet.payments.user_id</code>. usuario que recibe el pago
     */
    public final TableField<PaymentsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "usuario que recibe el pago");

    /**
     * The column <code>applet.payments.quantity</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>applet.payments.fee</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> FEE = createField(DSL.name("fee"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>applet.payments.payment_certified</code>.
     */
    public final TableField<PaymentsRecord, Byte> PAYMENT_CERTIFIED = createField(DSL.name("payment_certified"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>applet.payments.created</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.payments.modified</code>.
     */
    public final TableField<PaymentsRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private Payments(Name alias, Table<PaymentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payments(Name alias, Table<PaymentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.payments</code> table reference
     */
    public Payments(String alias) {
        this(DSL.name(alias), PAYMENTS);
    }

    /**
     * Create an aliased <code>applet.payments</code> table reference
     */
    public Payments(Name alias) {
        this(alias, PAYMENTS);
    }

    /**
     * Create a <code>applet.payments</code> table reference
     */
    public Payments() {
        this(DSL.name("payments"), null);
    }

    public <O extends Record> Payments(Table<O> child, ForeignKey<O, PaymentsRecord> key) {
        super(child, key, PAYMENTS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAYMENTS_USER_ID);
    }

    @Override
    public Identity<PaymentsRecord, Integer> getIdentity() {
        return (Identity<PaymentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentsRecord> getPrimaryKey() {
        return Keys.KEY_PAYMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PaymentsRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentsRecord>>asList(Keys.KEY_PAYMENTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<PaymentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PaymentsRecord, ?>>asList(Keys.PAYMENTS_IBFK_1);
    }

    public Users users() {
        return new Users(this, Keys.PAYMENTS_IBFK_1);
    }

    @Override
    public Payments as(String alias) {
        return new Payments(DSL.name(alias), this);
    }

    @Override
    public Payments as(Name alias) {
        return new Payments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(String name) {
        return new Payments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(Name name) {
        return new Payments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, Integer, Integer, Integer, Integer, BigDecimal, BigDecimal, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
