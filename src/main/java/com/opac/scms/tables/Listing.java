/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Indexes;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.ListingRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Listing extends TableImpl<ListingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.listing</code>
     */
    public static final Listing LISTING = new Listing();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListingRecord> getRecordType() {
        return ListingRecord.class;
    }

    /**
     * The column <code>applet.listing.id</code>.
     */
    public final TableField<ListingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>applet.listing.user_id</code>.
     */
    public final TableField<ListingRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>applet.listing.advert_category_id</code>.
     */
    public final TableField<ListingRecord, Integer> ADVERT_CATEGORY_ID = createField(DSL.name("advert_category_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>applet.listing.title</code>.
     */
    public final TableField<ListingRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.listing.description</code>.
     */
    public final TableField<ListingRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>applet.listing.date</code>.
     */
    public final TableField<ListingRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>applet.listing.latitude</code>.
     */
    public final TableField<ListingRecord, BigDecimal> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DECIMAL(20, 17).nullable(false), this, "");

    /**
     * The column <code>applet.listing.longitude</code>.
     */
    public final TableField<ListingRecord, BigDecimal> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DECIMAL(20, 17).nullable(false), this, "");

    /**
     * The column <code>applet.listing.reward</code>.
     */
    public final TableField<ListingRecord, BigDecimal> REWARD = createField(DSL.name("reward"), SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * The column <code>applet.listing.photo_uri</code>.
     */
    public final TableField<ListingRecord, String> PHOTO_URI = createField(DSL.name("photo_uri"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>applet.listing.map_uri</code>.
     */
    public final TableField<ListingRecord, String> MAP_URI = createField(DSL.name("map_uri"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>applet.listing.address</code>.
     */
    public final TableField<ListingRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>applet.listing.advert_type</code>.
     */
    public final TableField<ListingRecord, Byte> ADVERT_TYPE = createField(DSL.name("advert_type"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>applet.listing.chip_number</code>.
     */
    public final TableField<ListingRecord, String> CHIP_NUMBER = createField(DSL.name("chip_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>applet.listing.phone</code>.
     */
    public final TableField<ListingRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>applet.listing.email</code>.
     */
    public final TableField<ListingRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>applet.listing.contact</code>.
     */
    public final TableField<ListingRecord, String> CONTACT = createField(DSL.name("contact"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>applet.listing.published</code>.
     */
    public final TableField<ListingRecord, Byte> PUBLISHED = createField(DSL.name("published"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>applet.listing.state</code>.
     */
    public final TableField<ListingRecord, Integer> STATE = createField(DSL.name("state"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>applet.listing.end_date</code>.
     */
    public final TableField<ListingRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>applet.listing.end_motive</code>.
     */
    public final TableField<ListingRecord, Byte> END_MOTIVE = createField(DSL.name("end_motive"), SQLDataType.TINYINT, this, "");

    /**
     * The column <code>applet.listing.view_count</code>.
     */
    public final TableField<ListingRecord, Integer> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>applet.listing.shared</code>.
     */
    public final TableField<ListingRecord, Integer> SHARED = createField(DSL.name("shared"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>applet.listing.created</code>.
     */
    public final TableField<ListingRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.listing.modified</code>.
     */
    public final TableField<ListingRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.listing.listing_category_id</code>.
     */
    public final TableField<ListingRecord, Integer> LISTING_CATEGORY_ID = createField(DSL.name("listing_category_id"), SQLDataType.INTEGER, this, "");

    private Listing(Name alias, Table<ListingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Listing(Name alias, Table<ListingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.listing</code> table reference
     */
    public Listing(String alias) {
        this(DSL.name(alias), LISTING);
    }

    /**
     * Create an aliased <code>applet.listing</code> table reference
     */
    public Listing(Name alias) {
        this(alias, LISTING);
    }

    /**
     * Create a <code>applet.listing</code> table reference
     */
    public Listing() {
        this(DSL.name("listing"), null);
    }

    public <O extends Record> Listing(Table<O> child, ForeignKey<O, ListingRecord> key) {
        super(child, key, LISTING);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LISTING_ADVERT_CATEGORY_ID, Indexes.LISTING_LISTING_CATEGORY_ID, Indexes.LISTING_USER_ID);
    }

    @Override
    public List<ForeignKey<ListingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ListingRecord, ?>>asList(Keys.LISTING_IBFK_1, Keys.LISTING_IBFK_2, Keys.LISTING_IBFK_3);
    }

    public Users users() {
        return new Users(this, Keys.LISTING_IBFK_1);
    }

    public ListingCategories listingIbfk_2() {
        return new ListingCategories(this, Keys.LISTING_IBFK_2);
    }

    public ListingCategories listingIbfk_3() {
        return new ListingCategories(this, Keys.LISTING_IBFK_3);
    }

    @Override
    public Listing as(String alias) {
        return new Listing(DSL.name(alias), this);
    }

    @Override
    public Listing as(Name alias) {
        return new Listing(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Listing rename(String name) {
        return new Listing(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Listing rename(Name name) {
        return new Listing(name, null);
    }
}
