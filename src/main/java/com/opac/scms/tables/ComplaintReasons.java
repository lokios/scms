/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Keys;
import com.opac.scms.enums.ComplaintReasonsType;
import com.opac.scms.tables.records.ComplaintReasonsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ComplaintReasons extends TableImpl<ComplaintReasonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.complaint_reasons</code>
     */
    public static final ComplaintReasons COMPLAINT_REASONS = new ComplaintReasons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplaintReasonsRecord> getRecordType() {
        return ComplaintReasonsRecord.class;
    }

    /**
     * The column <code>applet.complaint_reasons.id</code>.
     */
    public final TableField<ComplaintReasonsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.complaint_reasons.type</code>.
     */
    public final TableField<ComplaintReasonsRecord, ComplaintReasonsType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(com.opac.scms.enums.ComplaintReasonsType.class), this, "");

    /**
     * The column <code>applet.complaint_reasons.name</code>.
     */
    public final TableField<ComplaintReasonsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.complaint_reasons.description</code>.
     */
    public final TableField<ComplaintReasonsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>applet.complaint_reasons.created</code>.
     */
    public final TableField<ComplaintReasonsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.complaint_reasons.modified</code>.
     */
    public final TableField<ComplaintReasonsRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private ComplaintReasons(Name alias, Table<ComplaintReasonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ComplaintReasons(Name alias, Table<ComplaintReasonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.complaint_reasons</code> table reference
     */
    public ComplaintReasons(String alias) {
        this(DSL.name(alias), COMPLAINT_REASONS);
    }

    /**
     * Create an aliased <code>applet.complaint_reasons</code> table reference
     */
    public ComplaintReasons(Name alias) {
        this(alias, COMPLAINT_REASONS);
    }

    /**
     * Create a <code>applet.complaint_reasons</code> table reference
     */
    public ComplaintReasons() {
        this(DSL.name("complaint_reasons"), null);
    }

    public <O extends Record> ComplaintReasons(Table<O> child, ForeignKey<O, ComplaintReasonsRecord> key) {
        super(child, key, COMPLAINT_REASONS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public Identity<ComplaintReasonsRecord, Integer> getIdentity() {
        return (Identity<ComplaintReasonsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComplaintReasonsRecord> getPrimaryKey() {
        return Keys.KEY_COMPLAINT_REASONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ComplaintReasonsRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplaintReasonsRecord>>asList(Keys.KEY_COMPLAINT_REASONS_PRIMARY);
    }

    @Override
    public ComplaintReasons as(String alias) {
        return new ComplaintReasons(DSL.name(alias), this);
    }

    @Override
    public ComplaintReasons as(Name alias) {
        return new ComplaintReasons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ComplaintReasons rename(String name) {
        return new ComplaintReasons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ComplaintReasons rename(Name name) {
        return new ComplaintReasons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, ComplaintReasonsType, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
