/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.tables.records.ListingImagesRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ListingImages extends TableImpl<ListingImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.listing_images</code>
     */
    public static final ListingImages LISTING_IMAGES = new ListingImages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ListingImagesRecord> getRecordType() {
        return ListingImagesRecord.class;
    }

    /**
     * The column <code>applet.listing_images.id</code>.
     */
    public final TableField<ListingImagesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>applet.listing_images.advert_id</code>.
     */
    public final TableField<ListingImagesRecord, Integer> ADVERT_ID = createField(DSL.name("advert_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>applet.listing_images.uri</code>.
     */
    public final TableField<ListingImagesRecord, String> URI = createField(DSL.name("uri"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.listing_images.created</code>.
     */
    public final TableField<ListingImagesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.listing_images.modified</code>.
     */
    public final TableField<ListingImagesRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private ListingImages(Name alias, Table<ListingImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ListingImages(Name alias, Table<ListingImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.listing_images</code> table reference
     */
    public ListingImages(String alias) {
        this(DSL.name(alias), LISTING_IMAGES);
    }

    /**
     * Create an aliased <code>applet.listing_images</code> table reference
     */
    public ListingImages(Name alias) {
        this(alias, LISTING_IMAGES);
    }

    /**
     * Create a <code>applet.listing_images</code> table reference
     */
    public ListingImages() {
        this(DSL.name("listing_images"), null);
    }

    public <O extends Record> ListingImages(Table<O> child, ForeignKey<O, ListingImagesRecord> key) {
        super(child, key, LISTING_IMAGES);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public ListingImages as(String alias) {
        return new ListingImages(DSL.name(alias), this);
    }

    @Override
    public ListingImages as(Name alias) {
        return new ListingImages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ListingImages rename(String name) {
        return new ListingImages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ListingImages rename(Name name) {
        return new ListingImages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
