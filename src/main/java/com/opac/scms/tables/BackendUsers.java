/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.BackendUsersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BackendUsers extends TableImpl<BackendUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.backend_users</code>
     */
    public static final BackendUsers BACKEND_USERS = new BackendUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BackendUsersRecord> getRecordType() {
        return BackendUsersRecord.class;
    }

    /**
     * The column <code>applet.backend_users.id</code>.
     */
    public final TableField<BackendUsersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.backend_users.name</code>.
     */
    public final TableField<BackendUsersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>applet.backend_users.last_name</code>.
     */
    public final TableField<BackendUsersRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>applet.backend_users.email</code>.
     */
    public final TableField<BackendUsersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.backend_users.username</code>.
     */
    public final TableField<BackendUsersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>applet.backend_users.password</code>.
     */
    public final TableField<BackendUsersRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.backend_users.rol</code>.
     */
    public final TableField<BackendUsersRecord, Byte> ROL = createField(DSL.name("rol"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>applet.backend_users.active</code>.
     */
    public final TableField<BackendUsersRecord, Byte> ACTIVE = createField(DSL.name("active"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("1", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>applet.backend_users.created</code>.
     */
    public final TableField<BackendUsersRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.backend_users.modified</code>.
     */
    public final TableField<BackendUsersRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private BackendUsers(Name alias, Table<BackendUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private BackendUsers(Name alias, Table<BackendUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.backend_users</code> table reference
     */
    public BackendUsers(String alias) {
        this(DSL.name(alias), BACKEND_USERS);
    }

    /**
     * Create an aliased <code>applet.backend_users</code> table reference
     */
    public BackendUsers(Name alias) {
        this(alias, BACKEND_USERS);
    }

    /**
     * Create a <code>applet.backend_users</code> table reference
     */
    public BackendUsers() {
        this(DSL.name("backend_users"), null);
    }

    public <O extends Record> BackendUsers(Table<O> child, ForeignKey<O, BackendUsersRecord> key) {
        super(child, key, BACKEND_USERS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public Identity<BackendUsersRecord, Integer> getIdentity() {
        return (Identity<BackendUsersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BackendUsersRecord> getPrimaryKey() {
        return Keys.KEY_BACKEND_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BackendUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<BackendUsersRecord>>asList(Keys.KEY_BACKEND_USERS_PRIMARY);
    }

    @Override
    public BackendUsers as(String alias) {
        return new BackendUsers(DSL.name(alias), this);
    }

    @Override
    public BackendUsers as(Name alias) {
        return new BackendUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BackendUsers rename(String name) {
        return new BackendUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BackendUsers rename(Name name) {
        return new BackendUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, String, Byte, Byte, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
