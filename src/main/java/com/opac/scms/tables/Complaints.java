/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Keys;
import com.opac.scms.enums.ComplaintsType;
import com.opac.scms.tables.records.ComplaintsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Complaints extends TableImpl<ComplaintsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.complaints</code>
     */
    public static final Complaints COMPLAINTS = new Complaints();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplaintsRecord> getRecordType() {
        return ComplaintsRecord.class;
    }

    /**
     * The column <code>applet.complaints.id</code>.
     */
    public final TableField<ComplaintsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.complaints.advert_id</code>.
     */
    public final TableField<ComplaintsRecord, Integer> ADVERT_ID = createField(DSL.name("advert_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>applet.complaints.denounced_user_id</code>.
     */
    public final TableField<ComplaintsRecord, Integer> DENOUNCED_USER_ID = createField(DSL.name("denounced_user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>applet.complaints.user_id</code>.
     */
    public final TableField<ComplaintsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>applet.complaints.complaint_reason_id</code>.
     */
    public final TableField<ComplaintsRecord, Integer> COMPLAINT_REASON_ID = createField(DSL.name("complaint_reason_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>applet.complaints.type</code>.
     */
    public final TableField<ComplaintsRecord, ComplaintsType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(7).nullable(false).asEnumDataType(com.opac.scms.enums.ComplaintsType.class), this, "");

    /**
     * The column <code>applet.complaints.date</code>.
     */
    public final TableField<ComplaintsRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>applet.complaints.text</code>.
     */
    public final TableField<ComplaintsRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>applet.complaints.created</code>.
     */
    public final TableField<ComplaintsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>applet.complaints.modified</code>.
     */
    public final TableField<ComplaintsRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(0), this, "");

    private Complaints(Name alias, Table<ComplaintsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Complaints(Name alias, Table<ComplaintsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.complaints</code> table reference
     */
    public Complaints(String alias) {
        this(DSL.name(alias), COMPLAINTS);
    }

    /**
     * Create an aliased <code>applet.complaints</code> table reference
     */
    public Complaints(Name alias) {
        this(alias, COMPLAINTS);
    }

    /**
     * Create a <code>applet.complaints</code> table reference
     */
    public Complaints() {
        this(DSL.name("complaints"), null);
    }

    public <O extends Record> Complaints(Table<O> child, ForeignKey<O, ComplaintsRecord> key) {
        super(child, key, COMPLAINTS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public Identity<ComplaintsRecord, Integer> getIdentity() {
        return (Identity<ComplaintsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ComplaintsRecord> getPrimaryKey() {
        return Keys.KEY_COMPLAINTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ComplaintsRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplaintsRecord>>asList(Keys.KEY_COMPLAINTS_PRIMARY);
    }

    @Override
    public Complaints as(String alias) {
        return new Complaints(DSL.name(alias), this);
    }

    @Override
    public Complaints as(Name alias) {
        return new Complaints(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaints rename(String name) {
        return new Complaints(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaints rename(Name name) {
        return new Complaints(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, Integer, Integer, ComplaintsType, LocalDateTime, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
