/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.MigrationsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Migrations extends TableImpl<MigrationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.migrations</code>
     */
    public static final Migrations MIGRATIONS = new Migrations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MigrationsRecord> getRecordType() {
        return MigrationsRecord.class;
    }

    /**
     * The column <code>applet.migrations.id</code>.
     */
    public final TableField<MigrationsRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.migrations.migration</code>.
     */
    public final TableField<MigrationsRecord, String> MIGRATION = createField(DSL.name("migration"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>applet.migrations.batch</code>.
     */
    public final TableField<MigrationsRecord, Integer> BATCH = createField(DSL.name("batch"), SQLDataType.INTEGER.nullable(false), this, "");

    private Migrations(Name alias, Table<MigrationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Migrations(Name alias, Table<MigrationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.migrations</code> table reference
     */
    public Migrations(String alias) {
        this(DSL.name(alias), MIGRATIONS);
    }

    /**
     * Create an aliased <code>applet.migrations</code> table reference
     */
    public Migrations(Name alias) {
        this(alias, MIGRATIONS);
    }

    /**
     * Create a <code>applet.migrations</code> table reference
     */
    public Migrations() {
        this(DSL.name("migrations"), null);
    }

    public <O extends Record> Migrations(Table<O> child, ForeignKey<O, MigrationsRecord> key) {
        super(child, key, MIGRATIONS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public Identity<MigrationsRecord, UInteger> getIdentity() {
        return (Identity<MigrationsRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<MigrationsRecord> getPrimaryKey() {
        return Keys.KEY_MIGRATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MigrationsRecord>> getKeys() {
        return Arrays.<UniqueKey<MigrationsRecord>>asList(Keys.KEY_MIGRATIONS_PRIMARY);
    }

    @Override
    public Migrations as(String alias) {
        return new Migrations(DSL.name(alias), this);
    }

    @Override
    public Migrations as(Name alias) {
        return new Migrations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Migrations rename(String name) {
        return new Migrations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Migrations rename(Name name) {
        return new Migrations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UInteger, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
