/*
 * This file is generated by jOOQ.
 */
package com.opac.scms.tables;


import com.opac.scms.Applet;
import com.opac.scms.Keys;
import com.opac.scms.tables.records.FailedJobsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FailedJobs extends TableImpl<FailedJobsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>applet.failed_jobs</code>
     */
    public static final FailedJobs FAILED_JOBS = new FailedJobs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FailedJobsRecord> getRecordType() {
        return FailedJobsRecord.class;
    }

    /**
     * The column <code>applet.failed_jobs.id</code>.
     */
    public final TableField<FailedJobsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>applet.failed_jobs.connection</code>.
     */
    public final TableField<FailedJobsRecord, String> CONNECTION = createField(DSL.name("connection"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>applet.failed_jobs.queue</code>.
     */
    public final TableField<FailedJobsRecord, String> QUEUE = createField(DSL.name("queue"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>applet.failed_jobs.payload</code>.
     */
    public final TableField<FailedJobsRecord, String> PAYLOAD = createField(DSL.name("payload"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>applet.failed_jobs.exception</code>.
     */
    public final TableField<FailedJobsRecord, String> EXCEPTION = createField(DSL.name("exception"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>applet.failed_jobs.failed_at</code>.
     */
    public final TableField<FailedJobsRecord, LocalDateTime> FAILED_AT = createField(DSL.name("failed_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private FailedJobs(Name alias, Table<FailedJobsRecord> aliased) {
        this(alias, aliased, null);
    }

    private FailedJobs(Name alias, Table<FailedJobsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>applet.failed_jobs</code> table reference
     */
    public FailedJobs(String alias) {
        this(DSL.name(alias), FAILED_JOBS);
    }

    /**
     * Create an aliased <code>applet.failed_jobs</code> table reference
     */
    public FailedJobs(Name alias) {
        this(alias, FAILED_JOBS);
    }

    /**
     * Create a <code>applet.failed_jobs</code> table reference
     */
    public FailedJobs() {
        this(DSL.name("failed_jobs"), null);
    }

    public <O extends Record> FailedJobs(Table<O> child, ForeignKey<O, FailedJobsRecord> key) {
        super(child, key, FAILED_JOBS);
    }

    @Override
    public Schema getSchema() {
        return Applet.APPLET;
    }

    @Override
    public Identity<FailedJobsRecord, ULong> getIdentity() {
        return (Identity<FailedJobsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FailedJobsRecord> getPrimaryKey() {
        return Keys.KEY_FAILED_JOBS_PRIMARY;
    }

    @Override
    public List<UniqueKey<FailedJobsRecord>> getKeys() {
        return Arrays.<UniqueKey<FailedJobsRecord>>asList(Keys.KEY_FAILED_JOBS_PRIMARY);
    }

    @Override
    public FailedJobs as(String alias) {
        return new FailedJobs(DSL.name(alias), this);
    }

    @Override
    public FailedJobs as(Name alias) {
        return new FailedJobs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedJobs rename(String name) {
        return new FailedJobs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FailedJobs rename(Name name) {
        return new FailedJobs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<ULong, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
